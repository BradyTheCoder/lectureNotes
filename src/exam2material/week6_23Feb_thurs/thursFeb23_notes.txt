HW 4 due tonight

#6: p → q       equivalent to       ¬p ∨ q

    start by assuming ¬(¬p ∨ q)
        assume p (with the goal of proving ¬p)
            get q from the premise
            use Vi with q to get ¬p ∨ q
            now we have a _|_
        now can get ¬p
        another Vi
    want to get a contradiction


#7: ¬(p → q)    equivalent to       p ∧ ¬q
    assume ¬(p ∧ ¬q)
        if we had p -> q, we would have a contradiction
        subproof, assume p
            assume ¬q
                get p ∧ ¬q
                I have a contradiction with my ¬(p ∧ ¬q) assumption
            now I have q from pbc
       now I have p->q
    goal: contradiction


HW 5 due Tuesday, February 28


////////////////////////////////////

Today:

- more with sets
- limitations of propositional logic
- begin predicate logic

///////////////////////////////////

∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

///////////////////////////////////

Quick review:

A ⋃ B = {x : x ∈ A ⋁ x ∈ B}

A ⋂ B = {x : x ∈ A ⋀ x ∈ B}

A - B = {x : x ∈ A ⋀ x ∉ B}

///////////////////////////////////

Subset - A is a subset of B, written A ⊆ B, if
    all elements in A are also in B.

(We say A ⊂ B if A is a subset of B but A ≠ B.)



Example:

A = {1,3,4}

B = {1,3,5,8}

A is not a subset of B

A = {1,3,8}

B = {1,3,5,8}

A is a subset of B

//////////////////////////////////


Quantifiers - helps describe all or some elements in a set

    ∀ - universal quantifier, read as "for all"

    ∃ - existential quantifier, read as "there exists"



∀ x ∈ A ...     "For all elements x in set A..."

∃ x ∈ A ...     "There exists at least one x in set A..."





∀ x ∈ ℝ (x^2 ≥ 0)       //what is this saying? why is it true?

The square of all real numbers is greater than or equal to 0.


∃ x ∈ ℤ (x^2 = 1)       //what is this saying? why is it true?

There is an integer whose square is 1.


/////////////////////////////////////

How could we define whether set A is a subset of set B using quantifiers?

A ⊆ B means ∀ x (x ∈ A → x ∈ B)




How could we define whether set A equals set B using quantifiers?

∀ x ((x ∈ A → x ∈ B) ⋀ (x ∈ B → x ∈ A ))



∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

//////////////////////////////////////

Properties about sets.

Distributive laws

    A ⋃ (B ⋂ C) = (A ⋃ B) ⋂ (A ⋃ C)

    A ⋂ (B ⋃ C) = (A ⋂ B) ⋃ (A ⋂ C)

similar to a ⋁ (b ⋀ c) = (a ⋁ b) ⋀ (a ⋁ c)

Why?

A ⋃ (B ⋂ C) = (A ⋃ B) ⋂ (A ⋃ C).

If x is in A ⋃ (B ⋂ C), then x is in A or x is in B ⋂ C.
If x is in A, then x is in A ⋃ B and A ⋃ C. Thus x is
also in (A ⋃ B) ⋂ (A ⋃ C). Otherwise, if x is in B ⋂ C
then x is in both B and C. So x is in A ⋃ B and also A ⋃ C,
and so is in their intersection -- (A ⋃ B) ⋂ (A ⋃ C).

If x is in (A ⋃ B) ⋂ (A ⋃ C), then x is in A ⋃ B and also A ⋃ C.
This can be satisfied if x is in A or in both B and C. Then
x is in A ⋃ (B ⋂ C).







What do we know if A - B = A?

B and A have no common elements.

∀ x (x ∈ B → x ∉ A)


What do we know if A - B = B - A

A = {1,2,3}
B = {1,2,3}

A is equivalent to B, and A - B = B - A = ∅

∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

//////////////////////////////////////

Limitations of propositional logic:

All humans are mortal.
Socrates is human.
Therefore, Socrates is mortal.


p: All humans are mortal
q: Socrates is a human
r: Socrates is mortal

p, q ⊢ r

How would we prove this is propositional logic?




///////////////

Predicate logic:

Instead of propositions, we will make claims about
individuals in a domain (a set)


These claims will involve predicates and quantifiers



//////////////////

Predicates.


A predicate is a boolean function that represents whether
    an individual has a particular property




Example:

    Domain: ℤ
    P(x): whether x > 0

    What is the value of P(1)? true

    What is the value of P(0)? false



Example:

    Domain: {x : x is a student at K-State}
    C(x): whether x is in CIS 301


    Bob is taking: CIS 300, ECE 241, MATH 221, ENGL 200
    Jill is taking: CIS 301, MATH 510, HIST 251, MUSIC 170




    What is the value of C(Bob)? false (Bob is not in CIS 301)

    What is the value of C(Jill)? true (Jill is in CIS 301)


    What is the value of C(Bob) ⋀ C(Jill)? false
        (just like prop. logic)


////////////////

Quantifiers and predicates

Domain: {strawberry, blueberry, banana, orange, grapefruit, apple}

Berry(x): x is a berry
Citrus(x): x is a citrus fruit
Peel(x): x has a peel (that needs to be removed before eating)
Seeds(x): x contains inedible seeds
Bite(x): f is bite-sized

Are these statements true or false?

∀ x Berry(x) = false

    --> how could we express the same statement in our domain
    WITHOUT a quantifier?

Berry(strawberry) ^ Berry(blueberry) ^ Berry(banana) ..



∃ x (Citrus(x) ⋀ Seeds(x))

true! both oranges and grapefruits are citrus with seeds

        --> how could we express the same statement in our domain
        WITHOUT a quantifier?

(Citrus(strawberry) ⋀ Seeds(strawberry)) V (Citrus(blueberry) ⋀ Seeds(blueberry)) ...




∀ x (Berry(x) ⋀ Bite(x))

Every fruit is a berry and is bite-sized.

false (banana)


∀ x (Berry(x) → Bite(x))

All berries are bite-sized.

true (assuming we can eat strawberries in one bite)


¬(∀ x Peel(x))

Not all fruits have a peel.
true - blueberries don't have a peel

(equivalent to "there is a fruit that doesn't have a peel")



¬(∀ x (Seeds(x) → Citrus(x)))

Not all fruits with seeds are citrus.
true - apples are a fruit with seeds but are not citrus


∀ x ¬Peel(x)

All fruits don't have a peel

false - bananas


¬(∃ x Peel(x))

There does exist a fruit with a peel
false - bananas


∃ x ¬Berry(x)

There is a fruit that's not a berry
true - banana

¬(∀ x Berry(x))

Not all fruits are berries
true - banana


∃ x (Citrus(x) → Berry(x))

There exists a fruit and if the fruit is citrus, then
it is a berry.

this is actually true if any elements are not citrus.

apple makes this true.


∀ x (Citrus(x) → Berry(x))

NOT true because it would have true for every element
(and it isn't true for oranges)


/////////////////

Predicates in math.

Can use boolean functions to represent properties in math, like this:

Domain: ℕ
Big(x): whether x > 100

∃ x Big(x)

true - 101

But more commonly list the property itself, like this:

∃ x (x > 100)

(or, sometimes also list the domain in the statement: ∃ x ∈ ℕ : (x > 100)

///////////////////////////////

Domain: ℤ

P(x, y): whether x + y = 0


//what is this saying?
∀ x ∃ y P(x, y)

    or: ∀ x ∃ y (x + y = 0)

For all numbers x, there exists a number y where x + y = 0

true!

//is this the same thing?
∃ y ∀ x P(x, y)

There exists a number y where for all x, x + y = 0

no! different statement, doesn't happen

//////////////////////////////

Domain: ℤ


What do these mean in English? Are they true?


∀ n ∃ m (n^2 < m)

For all numbers n, there exists a number m where n^2 < m

(just one bigger than the square would work). True!

∀ x ∃ y (x = y^2)

For all numbers x, there exists a y where x = y^2

NO! (because these are integers). if x = 7, there is no
integer y that works.



Write the following in predicate logic:
----------------------------------------

The sum of two negative integers is negative

Domain: ℤ

∀ x ∀ y (x < 0 ⋀ y < 0 → (x + y) < 0)


The difference of two positive integers is not necessarily positive

there exists one that's not positive

∃ x ∃ y (x > 0 ^ y > 0 ^ (x-y <= 0))

x = 4
y = 5

not all such differences are positive

¬(∀ x ∀ y (x > 0 ^ y > 0 -> (x- y) > 0))


∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

//////////////////////////////

Writing specifications using predicate logic

Domain: {x : x is a user input number}




Want to specify: individual "min" is the minimum user input element

(∀ x (min <= x)) ^ (∃ x min == x)


//////////////////////////////


Next time:
- Classifying predicate logic statements in a domain
    (tautology, contingent, contradictory)
- Determining if arguments in predicate logic are valid
- Equivalent statements in predicate logic