HW 4 extended to Thursday, February 23

--> there will be another (shortish) HW posted today, due next week

////////////////////////////////////

Today:

- remaining negation rules
- natural deduction proof strategies
- soundness and completeness
- begin sets

///////////////////////////////////

Bottom-elimination:

         ⊥
⊥e:  ----------
         R


Proof by contradiction (reductio ad absurdum):

       {¬P assume
        ... ⊥}
pbc:  ----------
          P

///////////////////////////////////


p ∨ q, ¬p ⊢ q


¬¬p ⊢ p



///////////////////////////////////

In separate files:


¬q → ¬p ⊢ p → q         //not5.logika



¬(¬p ∨ ¬q) ⊢ p ∧ q      //not6.logika



////////////////////////////////////

A THEOREM in propositional logic is something that is
always true with no need for premises. For example:


Law of the excluded middle.

p ∨ ¬p

⊢ p ∨ ¬p                //lem.logika



⊢ (theorem that you are trying to prove)

//////////////////////////////////

How do we approach proofs?

1. Write out all the premises
2. Extract all information from premises (∧e, →e)
3. Look at what you are trying to prove (find its top level operator)

    ∧ -

    ∨ -

    → -

    ¬ -

    just a propositional atom? see how to get that from premises
        if that atom is the RHS of an implies, prove the LHS of the implies
        to get it


After each claim - __

Inside a subproof - __


Doesn't fit a pattern or doesn't work out from above:
- Negation involved? Try pbc.
- As a last resort, copy/paste LEM proof to have (something) ∨ ¬(something).
    Use OR-elimination on it.

/////////////////////////////////

Putting it all together.

(c ∧ n) → t, h ∧ ¬s, h ∧ ¬(s ∨ c) → p ⊢ (n ∧ ¬t) → p        //bigger1.logika


(p → q) → r, s → ¬p, t, (¬s ∧ t) → q ⊢ r                    //bigger2.logika

/////////////////////////////////

SOUNDNESS and COMPLETENESS of propositional logic



SOUNDNESS: everything that is provable is actually true

everything we can prove with natural deduction is
also true in truth tables




COMPLETENESS: everything that is true is provable

everything we can show is true in a truth table
can also be proved with natural deduction






Propositional logic is both SOUND and COMPLETE.


Proving the sequent:

    P1, P2, ..., Pn ⊢ q

Is equivalent to using truth tables to show that whenever

    P1, P2, ..., Pn

are true, then q is also true

//////////////////////////////////////

Sets.

- A set is an unodered collection of elements


    x ∈ A       means that x is an element in set A

    x ∉ A       means that x is not an element in set A




- Common sets in math:

    ℕ
    ℤ
    ℚ
    ℝ
    ℂ
    ∅


////////////////////////////////////

Set builder notation.

{variable : conditions}


{x : x ∈ ℕ, 5 ≤ x ≤ 10}

{x : x is prime}

{d : d is a weekday}

{v : v is a vowel}

{k : k is a letter in "abracadabra"}

{x : x = 2k, k ∈ ℕ}

{n : n = k^2, k ∈ Z}

{n : n = 3a + 1, a ∈ ℕ, 1 ≤ a ≤ 4}


///////////////////////////////////////

Describe these sets in set builder notation


{5,10,15}


{CIS 115, CIS 200, CIS 300, CIS 301}


{2,4,8,16,32}

///////////////////////////////////////

Set union, ⋃

The union of the sets A and B, written A ⋃ B, is the set
of all elements that are in either A or B or both.


A ⋃ B = {x : x ∈ A ⋁ x ∈ B}



///////////////////////////////////////

Set intersection, ⋂

The intersection of the sets A and B, written A ⋂ B, is the set
of all elements that are in both A and B.


A ⋂ B = {x : x ∈ A ⋀ x ∈ B}


///////////////////////////////////////

Set difference, -

The difference between the sets A and B, written A - B, is the set
of all elements that are in A but are not in B.


A - B = {x : x ∈ A ⋀ x ∉ B}



///////////////////////////////////////

A = {1,3,7,10,11,12}

B = {2,3,4,5,6,7}


Find:

A ⋃ B

A ⋂ B

A - B

B - A

///////////////////////////////////////


Next time:

- more with sets
- limitations of propositional logic
- predicates and quantifiers