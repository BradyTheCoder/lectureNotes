HW 5 due by midnight tonight

    Reminder (maybe our domain is people):

        ∃ x student(x)
            "there is a student"

        ¬(∃ x student(x))
            "there does not exist a student"

        ∃ x ¬student(x)
            "there exists someone who is not a student"

        ∀ x student(x)
            "everyone is a student"

        ¬(∀ x student(x))
            "not everyone is a student"

        ∀ x ¬student(x)
            "all people are not students"
            (so no one is a student)


HW 6 will be posted after class, due Tues March 7

Exam 2 will be Thurs March 9

///////////////////////////////////

Today:
- Classifying predicate logic statements in a domain
- Equivalent statements in predicate logic
- Negating predicate logic statements, DeMorgan's laws
- Determining if arguments in predicate logic are valid
- Begin proofs in predicate logic

∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

//////////////////////////////////

Classifying predicate logic statements.


∀ x (x > 0 → x-1 > 0)


Is this statement always true?

Z, the set of integers - no!
    when x = 1, this statement is not true


Does the domain matter?

domain = {x : x ∈ Z ^ x > 5}

would be true for that domain

///

∀ x ∃ y (x + y = 0)

    for all x, there exists a y where x + y = 0


Is this statement always true?

    Z, set of integers: yes! all numbers have an additive inverse
    N: no! none of the numbers have an additive inverse
        because N doesn't include negatives.

Does the domain matter?



///////////////////////////////////

Equivalence: DeMorgan's law (part 1).

¬(∃ x P(x))         ∀ x ¬P(x)

How might we read these two statements?

There does not exist an x where P(x) holds
For all x, P(x) does not hold


We will prove this on Thursday

suppose our domain is k1 through kn


∃ x P(x) equivalent P(k1) V P(k2) V ... V P(kn)
¬(∃ x P(x))   equivalent to ¬(P(k1) V P(k2) V ... V P(kn))
    which is ¬P(k1) ^ ¬P(k2) ^ ... ^ ¬P(kn)
    which is ∀ x ¬P(x)


...but what is the idea?


///////////////////////////////////

Equivalence: DeMorgan's law (part 2).

¬(∀ x P(x))       ∃ x ¬P(x))

How might we read these two statements?

∀ x P(x) equivalent to P(k1) ^ P(k2) ^... ^ P(kn)
¬(∀ x P(x))    equiv. to ¬(P(k1) ^ P(k2) ^... ^ P(kn))
    which is equiv. to ¬P(k1) V ¬P(k2) V ... V ¬P(kn)
    ∃ x ¬P(x))

We will prove this on Thursday


...but what is the idea?


////////////////////////////////////

Example:

- want a method to return whether all numbers in an array are negative

--> how could we specify this in predicate logic? any different ways?

∀ x (x < 0) - all elements are negative

A x ¬(x >= 0) - all elements are not non-negative


--> how could we implement this function in different ways?

This one: ¬(∃ x x >= 0)
    (there does not exist an x that is not negative)

public boolean allNegative(int[] nums) {
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] >= 0) {
            return false;
        }
    }

    return true;
}

∀ x (x < 0)
public boolean allNegative(int[] nums) {
    int count = 0;
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] < 0) {
            count++;
        }
    }

    return (count == nums.length);
}




///////////////////////////////////

Apply DeMorgan's laws: example

Domain: students
Predicates:
    in5th(x): student x is in 5th grade
    wonPrize(x): student x won a prize
    friendsWith(x, y): student x is friends with student y
        (not necessarily reciprocal)


1) Express the statement in predicate logic

2) Negate the statement so no negation is outside a quantifier
or outside a statement with logical connectives

    Reminder:
        p → q is equivalent to: ¬p ⋁ q
        ¬(p ⋀ q) is equivalent to: ¬p ⋁ ¬q
        ¬(p ⋁ q) is equivalent to: ¬p ⋀ ¬q
        ¬(p → q) is equivalent to: ¬(¬p ⋁ q) = p ^ ¬q

///

    in5th(x): student x is in 5th grade
    wonPrize(x): student x won a prize
    friendsWith(x, y): student x is friends with student y
        (not necessarily reciprocal)

A 5th grader won a prize

∃ x (in5th(x) ^ wonPrize(x))

Translation:

Negation:

    ¬(∃ x (in5th(x) ^ wonPrize(x)))
    ∀ x ¬(in5th(x) ^ wonPrize(x))
    ∀ x ¬in5th(x) V ¬(wonPrize(x))
    ∀ x (in5th(x) -> ¬wonPrize(x))

    all 5th graders did win a prize

///

All prize-winners were 5th graders

Translation:

∀ x (wonPrize(x) -> in5th(x))

Negation:

    ¬(∀ x (wonPrize(x) -> in5th(x)))
    ∃ x ¬(wonPrize(x) -> in5th(x))
    ∃ x (wonPrize(x) ^ ¬in5th(x))

    There is a student who won a prize and is not in 5th grade.


///

All 5th graders have a friend

Translation:

∀ x ∃ y (in5th(x) -> friendsWith(x, y))

Negation:

¬(∀ x ∃ y (in5th(x) -> friendsWith(x, y)))
∃ x ¬(∃ y (in5th(x) -> friendsWith(x, y)))
∃ x ∀ y ¬(in5th(x) -> friendsWith(x, y)))
∃ x ∀ y (in5th(x) ^ ¬friendsWith(x, y))

there is a 5th grader who is not friends with anyone

///

All 5th graders are friends with each other

Translation:

∀ x ∀ y (in5th(x) ^ in5th(y) -> friendsWith(x,y))

Negation:
¬(∀ x ∀ y (in5th(x) ^ in5th(y) -> friendsWith(x,y)))
∃ x ¬(∀ y (in5th(x) ^ in5th(y) -> friendsWith(x,y)))
∃ x ∃ y ¬(in5th(x) ^ in5th(y) -> friendsWith(x,y))
∃ x ∃ y ¬(¬(in5th(x) ^ in5th(y) V friendsWith(x,y)))
∃ x ∃ y (in5th(x) ^ in5th(y) ^ ¬friendsWith(x,y)))

There is a 5th grader who is not friends with another 5th grader


///

A 5th grader is friends with all prize winners

Translation:

∃ x ∀ y (in5th(x) ^ wonPrize(y) -> friendsWith(x,y))

Negation:

¬(∃ x ∀ y (in5th(x) ^ wonPrize(y) -> friendsWith(x,y)))
∀ x ¬(∀ y (in5th(x) ^ wonPrize(y) -> friendsWith(x,y)))
∀ x ∃ y ¬(in5th(x) ^ wonPrize(y) -> friendsWith(x,y))
∀ x ∃ y ¬(¬(in5th(x) ^ wonPrize(y)) V friendsWith(x,y))
∀ x ∃ y (in5th(x) ^ wonPrize(y) ^ ¬friendsWith(x,y))

All 5th graders have a prize winner who is not their friend.


////////////////////////////////////

Arguments in predicate logic

Set of premises
Conclusion

Argument is VALID: regardless of domain,
    whenever all the premises are true,
    then the conclusion is also true

Argument is INVALID: we can find a domain where
    all the premises are true but the conclusion is false



Examples -- are the following arguments valid?


Premises: ∀ x (P(x) → Q(x)), ∃ x P(x)
Conclusion: ∃ x Q(x)

yes, valid argument. whatever thing is P is also Q.


Premises: ∀ x P(x)
Conclusion: ∃ x P(x)


domain: empty set
then premise would be true, but conclusion false
invalid


Premises: ∀ x (¬P(x) ⋁ ¬D(x)), D(a)
Conclusion: ¬P(a)

all elements not P or not D
a is D
this is valid

/////////////////////////////////

Proofs in predicate logic.

- want to formalize the kind of reasoning from above and
    from showing equivalence
- want valid inference rules that do NOT depend on the domain
    (there is no way to do the equivalent of a "truth table proof"
        in predicate logic...there are infinitely many domains!)

- add inference rules on quantifiers to our natural deduction rules


////////////////////////////////


For-all elimination (∀e):

       ∀ x P(x)
∀e: --------------
       P(v)

//...for some specific individual v



Idea:

- if we know that a statement is true for ALL individuals in
our domain


...then what would we know about a specific individual
in that domain?

///////////////////////////////

Syntax:

∀ x Human(x) ⊢ Human(Socrates)
{
    1. ∀ x Human(x)                 premise
    2. Human(Socrates)              ∀e 1 Socrates
}


///////////////////////////////

Example:


∀ x (inCIS301(x) → takenCIS200(x)), inCIS301(bob) ⊢ takenCIS200(bob)


//////////////////////////////

Next rule will be for all introduction.

First: consider these two statements:


∀ x (P(x) ⋀ Q(x))           (∀ x P(x)) ⋀ (∀ x Q(x))


are they equivalent?

how would we defend our position?


//////////////////////////////////


For-all introduction (∀i):

       { a
        ... P(a) }
∀i: --------------
       ∀ x P(x)

//a is a "fresh" individual (never used before)


Idea:

- We know a statement holds for some arbitrary individual
- That individual could have been anything!

...what can we say about that statement for all individuals?




Structure involves a subproof:

4. {
    5. a            //no justification here,
                    //could be any (fresh) individual name
    ...
    10. P(a)        //or some combination statement with
                    //our individual, a
}
11. ∀ x P(x)        Ai 4


///////////////////////////////////

Example:

Prove these statements are equivalent:

∀ x (P(x) ⋀ Q(x))           (∀ x P(x)) ⋀ (∀ x Q(x))


///////////////////////////////////

Are these statements equivalent?

∀ x (P(x) ⋁ Q(x))           (∀ x P(x)) ⋁ (∀ x Q(x))



///////////////////////////////////

Next time:
- proofs and equivalences with the existential quantifier