HW 8 due tonight

Use proof by contradiction to prove that the sum of a rational and
irrational number is irrational.

IF (I have a rational and irrational number) THEN their sum is irrational.

Assume r is a rational number and i is an irrational number.

Assume, for the sake of contradiction, that r+i is rational.

Since r is rational, there exist integers p and q (q not 0) such that
r = p/q. (Do the same kind of thing for i+r.)

We have that:

i = (r+i) - r


(want a contradiction)

HW 9 will be posted later today


//////////////////////////

Today:
- Intro to programming logic
- Assume statements
- Assert statements
- Processing assignment statements

//////////////////////////

Next section: programming logic

Apply proof techniques and similar reasoning to prove correctness
of basic programs.

(Why does this matter?)







////////////////////////////

Our Logika programs are a subset of Scala
    - variables (boolean, int, sequences)
    - printing and user input
    - math operations
    - conditional operations
    - if and if/else statements
    - while loops
    - functions


Basic Logika program #1
    - get user input number, add one to it, print it out

Basic Logika program #2
    - get user input number, print whether it is positive or negative

Basic Logika program #3
    - use a loop to print the numbers from 10 down to 1

Basic Logika program #4
    - write a separate function to add all elements in a sequence
    - create a sequence, call the function, print the result






////////////////////////

assume statements
    - preconditions
    - things we must assume about user input



assert statements
    - postconditions
    - what we want to be true after some code
    - PROVE, not test
    - must prove EXACTLY that statement before we assert it



How are Logika asserts different from C# (and other languages)?





////////////////////////

Process of validating a program:



(claims about inputs - assume)

program statement

(claims)

program statement

(claims)

program statement

(claims about output/results/postconditions - assert)






///////////////////////////////

Claims go in "logic blocks", which look like:

l"""{
    //line numbers with claims and justifications
    //similar to prop/pred logic proofs

    x. claim            justification lineNumbers
}"""

//////////////////////////////

Justifications (for now):

premise
    - something from an assume
    - a program assignment that was just executed
        (use == to show equality in the claim)
    - something shown in a previous logic block


algebra
    - any algebraic manipulation on a previous claim
    - include all relevant line numbers in whatever order
        (might be zero or 3+)

ANY of your propositional/predicate logic justifications
    (especially ^e1, ^e2, ^i, Vi1, Vi2)




//////////////////////////////

(add.logika)
Example: write a program that creates a number, x, with value 2

Create a value, y, that is initialized to x + 2

We want to assert at the end that y is 4

Write the necessary logic blocks




--> How could we also assert that x is still 2 using ONE assert?





//////////////////////////////

Example (max.logika):

get 2 user inputs: x and y
assume that x > y
set a max variable to x

want to assert that max >= x and max >= y







//////////////////////////////

The algebra justification works for most mathematical manipulations

Will not work on claims involving ∧, ∨, →, ⊥, ∀, ∃

Another justification: subst









/////////////////////////////

subst1 m n

l"""{
    ...
    m. LHS_M == RHS_M
    ...
    n. LHS_N == RHS_N
    ...
    x. (claim)              subst1 m n
}"""

(claim) rewrites claim n by substituting all occurrences of
    LHS_M with RHS_M


Example:

l"""{
    ...
    m. x + 1 == y - 4
    ...
    n. x*(x + 1) == (x + 1) + y
    ...
    j. x*(y - 4) == (y - 4) + y     subst1 m n
}"""






/////////////////////////////

subst2 m n

l"""{
    ...
    m. LHS_M == RHS_M
    ...
    n. LHS_N == RHS_N
    ...
    x. (claim)              subst2 m n
}

(claim) rewrites claim n by substituting all occurrences of
    RHS_M with LHS_M


Example:

l"""{
    ...
    m. x + 1 == y
    ...
    n. y*(x + 1) == (x + 1) + y
    ...
    x. (x + 1)*(x + 1) == (x + 1) + (x + 1) subst2 m n
}"""





/////////////////////////////////

Example (code fragment):

val num: Z = x + 2
val answer: Z = 4*num + 8
val another: Z = 5 - (x + 2)*3


l"""{
    1. num == x + 2             premise
    2. answer == 4*num + 8      premise
    3. another == 5 - (x+2)*3   premise
    4. answer == 4*(x+2) + 8    subst1 1 2
    5. another == 5 - num*3     subst2 1 3
}"""

--> substitute in for "num" in "answer" calculation (using subst)


--> substitute in for "x+2" in "another" calculation







//////////////////////////////

Assignment with mutation


var x: Z = 2

//what could we put in a logic block here?

l"""{
    1. x == 2               premise
}"""

x = x + 2

l"""{
    1. x == x + 2            premise <-- doesn't make sense
}"""

//what could we put in a logic block here?



(what are we missing?)


//////////////////////////////

If you change the value of a variable:
    -> add this claim to the next logic block:

y = y + 4
<-- y_old only exists here
x = x + 3
l"""{
    1. x == x_old + 3               premise
    2. y == y_old + 4               premise //NO! y isn't the one
                                            //that just changed

}"""

The name_old refers to the OLD value of the variable, just before
the latest update.

By the end of that logic block, want to state what the
variable's current value is WITHOUT using the _old value
(it won't be available after the next logic block)





//////////////////////

Example (add3.logika):

- get an input number
- save out an "orig" value that is equal to the input

add 1 to the input number
add 2 to the input number

want to assert that the resulting number is 3 more than the orig value



--> what if we added an assume that the input number was positive?

--> could we add to our assert that the resulting number is positive?

//////////////////////

Example (swap.logika):


inputs x and y (save their original values)

//x = 4, y = 7

x = x + y         //x = 11, y = 7
y = x - y         //x = 11, y = 4 (y became x!)
x = x - y         //x = 7, y = 4 (x became y!)

now x and y will have switched

Example: x is 10 and y is 3

///////////////////////

Next time:
- programs with division and modulus
- programs with conditional statements

