import org.sireum.logika._

var x: Z = readInt("Enter a positive number: ")
assume (x > 0)


//orig will always be the original user input value
val orig: Z = x

x = x + 1

//what can we put in a logic block here?

l"""{
    1. x == x_old + 1                   premise //assignment
    2. orig == x_old                    premise
    3. x == orig + 1                    subst2 2 1
    4. x_old > 0                        premise
    5. x > 0                            algebra 1 4
    //x is still positive here
}"""

x = x + 2

l"""{
    1. x == x_old + 2                   premise //assignment
    2. x_old == orig + 1                premise
    3. x == orig + 1 + 2                subst1 2 1
    4. x == orig + 3                    algebra 3
    5. x_old > 0                        premise
    6. x > 0                            algebra 1 5
    7. x == orig + 3 ^ x > 0            ^i 4 6
}"""


//what can we put in a logic block here?

//what do we want to assert? How has x changed?


//Once it is working - if x was originally positive,
//how could we assert that x was still positive at the end?
assert(x == orig + 3 & x > 0)