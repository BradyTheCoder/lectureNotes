HW 7 due today

HW 8 will be posted after class, due next Tuesday

I have your Exam 2 if you still need to pick it up

//////////////////////////

HW 7 problem 1:

∀ x ∀ y (S(y) → P(x)) ⊢ (∃ y S(y)) → (∀ x P(x))

need to prove ->
    assume ∃ y S(y)
        follow pattern for ∀i to get our goal
    goal: ∀ x P(x)


HW 7 problem 2:

∃ x ∀ y (K(x) V M(y)) ⊢ ∀ x ∃ y (M(x) V K(y))

need to prove a ∀ statement - follow pattern for ∀i
    use Ee on the premise to build to your conclude E statement


HW 7 problem 3:

∀ x ∀ y ∀ z (P(x, y) ^ P(y, z) → P(x, z)), ∀ x ¬P(x, x) ⊢
                        ∀ x ∀ y (P(x, y) → ¬P(y, x))

need to prove a ∀ statement - follow pattern for ∀i (Ax)
    need to prove a ∀ statement - follow pattern for ∀i (Ay)
        need to prove the inner implies - use ->i
            assume LHS of ->
            try to get RHS of -> (will need to use !i)



HW 7 problem 4:

2 + 4 + ... + 2n = n(n+1)

look for example last Thursday adding odd numbers


HW 7 problem 5:

n^5 - n is divisible by 5

look for similar divisibility example last Thurs.


HW 7 problem 6:

1*1! + 2*2! + ... + n*n! = (n+1)! - 1

think about factoring

(n+1)n! = (n+1)!

(n+2)(n+1)! = (n+2)!


//////////////////////////

Today:
- Recursive definitions
- Types of proofs

//////////////////////////////////

Recursive definitions.

- similar to recursion
- can be used to define functions, sets, and structures

//////////////////////////////////

Recursively defined functions.


To define a function whose domain is the set of nonnegative integers:

Base case: Specify the value of the function at 0 (or some other
    lowest value). (There may be more than one base case.)


Recursive step: Give a rule for finding the value of the function
    at all bigger integers (give a range) from its smaller values




//////////////////////////////////

Example (domain: all nonnegative integers):

f(0) = 3
f(n) = 2f(n-1) + 3, for n > 0


What is f(4)?

f(1) = 2*f(0) + 3 = 2*3 + 3 = 9
f(2)= 2*f(1) + 3 = 2*9 + 3 = 21
f(3) = 2*21 + 3 = 45
f(4) = 2*45 + 3 = 93


//////////////////////////////////

What does this define?

g(1) = 1
g(n) = n * g(n-1), for n > 1

factorial

g(3) = 3*g(2) = 6

g(2) = 2*g(1) = 2

//////////////////////////////////

Consider this pattern: 1, 2, 4, 7, 11, 16, 22, ...

Write a recursive definition.

    f(1) = 1
    f(n) = f(n-1) + (n-1), for n > 1


Next, come up with a non-recursive formula for f(n)


(might come back on Thursday)





////////////////////////////////

Suppose f(n) = n^2, for n >= 0. Write a recursive definition for f(n).

f(0) = 0
f(1) = 1
f(2) = 4
f(3) = 9
f(4) = 16
f(5) = 25

pattern: previous function value + next odd number

recursive definition:
f(0) = 0
f(n) = f(n-1) + (2n+ 1), n > 0




////////////////////////////////

Give a recursive definition of the function max so that:

    max(a1, a2, ..., an)

is the maximum of the n numbers a1, a2, ..., an.



--> How many base cases?

max(a1) = a1
max(a1, a2) = a1, if a1 >= a2
max(a1, a2) = a2, if a2 > a1
max(a1, a2, ..., an) = max(max(a1, ...,a_(n-1)), an), if n > 2




////////////////////////////////

Recursively defined sets.

Base case: list an element (or elements) that is in a set

Recursive case: If (some elements are in a set),
    then (some other element is in a set).


///////////////////////////////

Example:

Consider the subset S of the set of integers, defined as:

Base case: 1, 2 ∈ S

Recursive case: If x ∈ S and y ∈ S, then xy ∈ S

--> what are the elements in S?

{1,2,4,8,16,..}


--> how might we write S using set builder notation?

S = {x : x = 2^k, k >=0, k ∈ Z}


////////////////////////////////


Recursive definition for linked list?

Base case: NIL is a linked list (it is the empty list)
Recursive case: if x is a linked list, then
    data -> x is a linked list


/////////////////////////////////


∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥
/////////////////////////////////

Now we will look at more informal proofs.

    --> why? (prove programs are correct, prove running time of programs,
        prove systems are secure, make AI inferences, prove specifications
        are consistent, etc.)


////////////////////////////////

Terms.

Proposition - what were these in propositional logic?
    a statement from propositional / predicate logic
    in general, a statement that can be proved to be true or false




A *theorem* is an important proposition that can be proved true.





///////////////////////////////

Definitions.


An integer n is *even* if n = 2k for some integer k.



An integer n is *odd* if n = 2k + 1 for some integer k.



Any integer that is not odd is even,
and any integer that is not even is odd.


///////////////////////////////

Direct (conditional) proof


- Often want to prove things of the form: "If P, then Q"

--> how would we do this with natural deduction? (P->Q)

Assume P
...
Q


--> how can we do something similar in words?




/////////////////////////////

Direct proof template. If P, then Q

Assume P
...
Q





/////////////////////////////

Example.

Even(..)

∀x ∀y (Even(x) ^ Even(y) -> Even(xy))

in predicate logic:
    introduce two random individuals
    assume the two individuals are even
    ...
    try to show their product is even

The product of two even integers is even.

(If I have two even integers, then their product is even)


Let x and y be even integers.
Because x is even, there exists an integer k such that x = 2k.
Because y is even, there exists an integer m such that y = 2m.

Consider xy. We have that:
    xy = (2k)(2m)
        = 4km
        = 2(2km)

Thus xy = 2b where b the integer 2km.
Thus xy is even by the definition of even numbers.






How would we have written this in predicate logic?

--> How is our proof similar to natural deduction?

/////////////////////////////

Example.

The square of any odd integer is odd.

∀x (Odd(x) -> Odd(x^2))


Assume x is an odd integer. Because x is odd, there exists an integer
k such that x = 2k + 1.

We have that:
    x^2 = (2k+1)^2
        = 4k^2 + 2k + 1
        = 2(2k^2 + k) + 1

Thus x^2 = 2b+1 where b is the integer 2k^2 + k.
Thus x^2 is also an odd integer.






How would we have written this in predicate logic?



/////////////////////////////
∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥
/////////////////////////////////

Proof by contrapositive

P->Q
contrapositive: !Q -> !P

- Also for proving things of the form "If P, then Q"



Proof by contrapositive template:

Assume !Q
...
!P


/////////////////////////////

Example (contrapositive)

If x^2 is odd for an integer x, then x is odd.

Proof (contrapositive).
Assume x is not odd. Thus x must be even, so there exists an integer k
such that x = 2k. We have that:

    x^2 = (2k)^2
         = 4k^2
         = 2(2k^2)

So x^2 = 2b where b is the integer 2k^2. Thus x^2 is even,
so it follows that x^2 is not odd.


How would we write this in predicate logic?



/////////////////////////////

(will do on Thursday)

Example (contrapositive)

Suppose x ∈ Z. If 7x+9 is even, then x is odd.




(can we do the same thing with a direct proof?)



/////////////////////////////

Mistakes in proofs.

We want to "prove" that 1 = 2.


"Proof:"
Let a and b be two equal positive integers. We have that:

    1) a = b                    (premise)
    2) a^2 = ab                 (multiply both sides by a)
    3) a^2 - b^2 = ab - b^2     (subtract b^2 from both sides)
    4) (a-b)(a+b) = b(a-b)      (factor both sides)
    5) a+b = b                  (divide both sides by a-b)
    6) 2b = b                   (replace "a" with "b", since a = b)
    7) 2 = 1                    (divide both sides by b)


What went wrong?





/////////////////////////////

Next time:
- Proof by contradiction
- Proof by cases
- Proofs with sets

We will add in a couple of more definitions to work with.



