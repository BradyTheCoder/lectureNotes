HW 7 due today

HW 8 will be posted after class, due next Tuesday

//////////////////////////

Today:
- Recursive definitions
- Types of proofs

//////////////////////////////////

Recursive definitions.

- similar to recursion
- can be used to define functions, sets, and structures

//////////////////////////////////

Recursively defined functions.


To define a function whose domain is the set of nonnegative integers:

Base case: Specify the value of the function at 0 (or some other
    lowest value). (There may be more than one base case.)


Recursive step: Give a rule for finding the value of the function
    at all bigger integers (give a range) from its smaller values




//////////////////////////////////

Example:

f(0) = 3
f(n) = 2f(n-1) + 3, for n > 0


What is f(4)?


//////////////////////////////////

What does this define?

g(1) = 1
g(n) = n * g(n-1), for n > 1



//////////////////////////////////

Consider this pattern: 1, 2, 4, 7, 11, 16, ...

Write a recursive definition.

    f(1) = ??
    f(n) = ??, for n > 1


Come up with a non-recursive formula for f(n).

Hint: how does it compare to the sum of the first n numbers?




////////////////////////////////

Suppose f(n) = n^2, for n >= 0. Write a recursive definition for f(n).


////////////////////////////////

Give a recursive definition of the function max so that:

    max(a1, a2, ..., an)

is the maximum of the n numbers a1, a2, ..., an.



--> How many base cases?




////////////////////////////////

Recursively defined sets.

Base case: list an element that is in a set

Recursive case: If (some elements are in a set),
    then (some other element is in a set).


///////////////////////////////

Example:

Consider the subset S of the set of integers, defined as:

Base case: 1, 2 ∈ S

Recursive case: If x ∈ S and y ∈ S, then xy ∈ S

--> what are the elements in S?


--> how might we write S using set builder notation?


////////////////////////////////


Recursive definition for linked list?

/////////////////////////////////


∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥
/////////////////////////////////

Now we will look at more informal proofs.

    --> why? (prove programs are correct, prove running time of programs,
        prove systems are secure, make AI inferences, prove specifications
        are consistent, etc.)


////////////////////////////////

Terms.

Proposition - what were these in propositional logic?





A *theorem* is an important proposition that can be proved true.





///////////////////////////////

Definitions.


An integer n is *even* if n = 2k for some integer k.



An integer n is *odd* if n = 2k + 1 for some integer k.



Any integer that is not odd is even,
and any integer that is not even is odd.


///////////////////////////////

Direct (conditional) proof


- Often want to prove things of the form: "If P, then Q"

--> how would we do this with natural deduction?

--> how can we do something similar in words?




/////////////////////////////

Direct proof template.







/////////////////////////////

Example.

The product of two even integers is even.




How would we have written this in predicate logic?

--> How is our proof similar to natural deduction?

/////////////////////////////

Example.

The square of any odd integer is odd.



How would we have written this in predicate logic?



/////////////////////////////
∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥
/////////////////////////////////

Proof by contrapositive

- Also for proving things of the form "If P, then Q"



Proof by contrapositive template:



/////////////////////////////

Example (contrapositive)

If x^2 is odd for an integer x, then x is odd.




How would we write this in predicate logic?



/////////////////////////////

Example (contrapositive)

Suppose x ∈ Z. If 7x+9 is even, then x is odd.




(can we do the same thing with a direct proof?)





/////////////////////////////

Next time:
- Proof by contradiction
- Proof by cases
- Proofs with sets

We will add in a couple of more definitions to work with.



