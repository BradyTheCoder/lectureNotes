HW 9 due tonight

--> Logika hanging on #6

either check on a lab machine
or can email me your 6.logika link in your repo by 5:00pm today


--> #6 reasoning

we have:

val k: Z = (a+b)/2

...but want to claim that if a+b is odd, then
a+b = 2*k + 1


--> Why would this be?


1. (a+b) % 2 == 1           (try to get here)
2. k == (a+b)/2             premise //from assignment
3. a+b == 2*k + 1           algebra 1 2 //can do this if you have 1 and 2


HW 10 will be posted after class

Exam 3 is Thursday, April 20

/////////////////////////////////////////////

Verifying programs with functions.



Function contracts - just under function definition:

l"""{
    requires (precondition)
    ensures (postcondition)
}"""


Requires/precondition:
- any assumptions we need to make about the parameters
- user must prove these requirements BEFORE calling the function
- list preconditions as PREMISES in first logic block in function
- can have several preconditions -- put on the next lines, tabbed over


///

Ensures/postcondition:
- describes what the function returns
    - use "result" to mean return value

- user can use a postcondition as a PREMISE in a logic block
    after calling the function

- can have several postconditions -- put on the next lines, tabbed over


/////////////////////////////////

Example: plusOne.logika


Write function contract for plusOne

Prove the postcondition for plusOne

Validate the assert after calling plusOne




/////////////////////////////////

Example: tickets.logika
- find the total cost of tickets based on adult/child numbers
- each adult ticket is $50, and each child ticket is $30

- what do we need as preconditions?
- what should be the postcondition?

--> finish verification




//////////////////////////////////

Four steps:

1) What should be done before calling the function?

    suppose a precondition is: x < 0 | x > 10
    and we do:
        function(4-2)

    --> what would we need to do before the function call?

    1. (4-2) < 0 | (4-2) > 10


2) What can the function itself do with the preconditions?

list any precondition as a premise


3) What must the function do with the postconditions?

    if a postcondition is: result > 0

    and we have:

        return answer-y

    what do we have to prove before returning?

    answer-y > 0



4) What can the calling code do with the postcondition after
    the function returns?

    x = function(y+7)



maybe a postcondition is (num is the param): result > num

What can we claim?

x > y+7



/////////////////////////////////

Example: put our abs code in a function (absFn.logika)




/////////////////////////////////

Recursive functions

- exactly the same idea

 --> recursive call should go on its own line, like:
        total = recursiveCall(params)

    NOT combined with an expression:
        total = total + recursiveCall(params)


    Must do something like this instead:
        temp = recursiveCall(params)
        total = total + temp


Before making a recursive call:
    must prove the preconditions

After returning from the recursive call:
    you can list the postconditions as premises



/////////////////////////////////

Example (mult_recursive.logika):

- multiplication through repeated (recursive) addition
- write function contract
- do verification


/////////////////////////////// <--- stopped here

(will do the rest on Thursday)


SumOdds example (sumOdds_recursive.logika)

Want to get sum of first n odd numbers



First 2 odd numbers?


First 5 odd numbers?



--> How do we find the nth odd number, starting with 1?
    (Hint: 2*n is the nth even number)



- write the code

- write the function contract

- verify it (with some test code)

/////////////////////////////

Next time:
- verifying functions with loops