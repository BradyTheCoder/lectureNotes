
// This was our code for absolute value
// modify it to be in a function

import org.sireum.logika._

var num: Z = readInt("Enter a number: ")
val numOrig : Z = num

//update num to be the absolute value of the input
if (num < 0) {
    num = num * -1

    l"""{
        1. num_old < 0          premise //if condition true
        2. num == num_old * -1  premise //assignment
        3. numOrig == num_old   premise //from previous assignment
        4. num >= 0             algebra 1 2
        5. num == numOrig * -1  subst2 3 2
    }"""

} else {

    //do nothing -- num is already its own absolute value

    l"""{
        1. !(num < 0)           premise //condition is false
        2. num >= 0             algebra 1
        3. numOrig == num       premise //hasn't changed
        4. num == numOrig       algebra 3
    }"""
}

l"""{
    1. num >= 0             premise //needs to be true in both if/else
    2. num == numOrig*-1 V num == numOrig   premise //LHS if, RHS from else
    3. {
        4. num == numOrig*-1        assume //LHS
        5. num == numOrig V num == numOrig*-1   Vi2 4
    }
    6. {
        7. num == numOrig           assume //RHS
        8. num == numOrig V num == numOrig*-1   Vi1 7
    }
    9. num == numOrig V num == numOrig*-1       Ve 2 3 6
}"""

//assert that num is now the correct absolute value
assert(num >= 0)
assert(num == numOrig | num == numOrig*-1)

//do the verification

////////////////// Test code //////////////

val x: Z = 4

//use function to get absolute value of x
