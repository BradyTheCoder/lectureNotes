
import org.sireum.logika._

def sumOdds(n: Z): Z = {
    l"""{
        requires n >= 1
        ensures result == n*n
    }"""

    var sum: Z = 0
    if (n == 1) {
        //the sum is the first odd number

        sum = 1

        l"""{
            1. sum == 1                 premise //from assignment
            2. n == 1                   premise //condition is true
            3. sum == n*n               algebra 1 2 //proves postcondition

            //want: sum == n*n
        }"""

    } else {
        //get the sum of the previous n-1 odd numbers

        l"""{
            1. !(n == 1)                premise //condition is false
            2. n >= 1                   premise //the precondition is true
            3. n >= 2                   algebra 1 2
            4. n-1 >= 1                 algebra 3 //proves the precondition
        }"""

        sum = sumOdds(n-1)

        //and add on the nth odd number (which is 2n-1)
        l"""{
            1. sum = (n-1)*(n-1)          premise //from post. of recursion
            2. sum == n*n - 2*n + 1       algebra 1
        }"""

        sum = sum + 2*n - 1

        l"""{
            1. sum == sum_old + 2*n - 1     premise //from assignment
            2. sum_old == n*n - 2*n + 1     premise //from previous block
            3. sum == n*n - 2*n + 1 + 2*n - 1   subst1 2 1
            4. sum == n*n                   algebra 3 //proves post.
        }"""

        //want: sum == n*n
    }

    l"""{
        1. sum == n*n               premise //prove postcondition
    }"""

    return sum
}

////////////// Test code //////////////

val pos: Z = 4

//call sumOdds to get the sum of the 4 odd numbers

//prove precondition
l"""{
    1. pos == 4         premise
    2. pos >= 1         algebra 1 //proves precondition
}"""

val test: Z = sumOdds(pos)

//what do we want to assert that test is?

l"""{
    1. test == pos*pos          premise //from the postcondition
    2. pos == 4                 premise
    3. test == 16               algebra 1 2
}"""

//1 + 3 + 5 + 7 = ?
assert(test == 16)