HW 2 due tonight

--> make sure to add images to your git repository!

HW 3 will be posted later today

Exam 1 is Thursday, February 9

//////////////////////////////////////////

Today:
- Review: proving statements are not equivalent; satisfiability
- Proof arguments with truth tables
- Counterexamples to arguments
- Natural deduction rules

/////////////////////////////////////////

Consider:

¬(p ∨ q)

and

¬p ∨ ¬q


How would we show they are NOT equivalent?

p is T
q is F

¬(p ∨ q) would be false

¬p ∨ ¬q would be true

if (!(a == 10 || b == 0))

if (a != 10 || b != 0)




////////////////////////////////////////

Reminder: satisfiability

Definition? I can find a truth assignment that
makes the statement true




Example: (p → ¬q) → r

Is it satisfiable?

p = T
q = F
r = T



////////////////////////////////////////

Proving an argument.

*Premises* - pieces of information we are given (assume true)

*Conclusion* - something we are trying to show logically follows
    from our premises.


///

Proofs with truth tables.

Suppose we know:

    I am in the CS department or I am in the ECE department

    I am not in the ECE department.

    If I am in the CS department,
        then I can log in to the CS lab computers.


I want to prove:

    I can log in to the CS lab computers and I am in the CS department.



--> How would we translate to propositional logic?

p: I am in the CS department
q: I am in the ECE department
r: I can log in to the CS lab computers

Premises:
p V q
!q
p -> r

Conclusion: r ^ p


--> How might we prove this with truth tables?

make a separate truth table for each premise and the conclusion

find the list of each truth assignment that makes ALL premises true

make sure that every truth assignment in your list ALSO makes the conclusion true



////////////////////////////

Another example:

Premises:
    p → ¬q
    p → q
    p ∨ q

We wish to prove:

    q


You can do this on your own if you want.



/////////////////////////////

Counterexamples to arguments.

Consider the following argument:

    Suppose we know (these are *premises*):

        If it is sunny, then I wear sunscreen.

        I wear sunscreen.

    Given that, we want to conclude (this is our proposed *conclusion*):

        It is sunny.


p: it is sunny
q: I wear sunscreen

premises:
p -> q
q

Conclusion: p


p = F
q = T

We wish to find a COUNTEREXAMPLE to the argument.

--> need a case where the premises are true but the conclusions are not.





--> if we can find a counterexample, then the argument is NOT VALID

--> otherwise, the argument IS VALID

////////////////////////////

Downside of proofs with truth tables?




it is super annoying
and tedious
and long








////////////////////////////

New idea: demonstrate conclusion follows from premises using
*natural deduction*

    --> use a minimal set of deduction rules

    --> for each logical operator
        - *introduction* rule:
            lets us introduce a claim with that operator

        - *elimination* rule:
            lets us extract pieces from a claim with that operator

    --> apply these rules to create new claims that logically follow



/////////////////////////////////

Want to prove a *sequent* of the form:

    premises ⊢ conclusion

where *premises* is a comma-separated list.





Same idea as truth tables -- want to prove that anytime the premises
are all true, then the conclusion is also true.

--> but we will show the conclusion logically follows using
a series of natural deduction rules instead of truth tables.


////////////////////////////

AND rules idea.

1) What if we wanted to INTRODUCE an AND operator, like:
      P ∧ Q


   --> in what situations do you think we could do that?
   if I already had claims for P and claims for Q (separately)





2) What if we already had an AND statement like  P ∧ Q.

    --> what separate claims would make sense using that statement?

    P (all by itself)
    Q (all by itself)

    --> what happened to the AND operator in both cases?



//////////////////////////

AND rule summaries.


AND introduction:

        P   Q
∧i :  ---------
        P ∧ Q



--> How could we demonstrate this rule in a truth table?

anytime P and Q are both true, then P ∧ Q is also true in a truth table


///

AND elimination:

        P ∧ Q              P ∧ Q
 ∧e1 : ---------    ∧e2 : ---------
          P                  Q



--> How could we demonstrate these rules in a truth table?



//////////////////////////////////

What if we knew:

    a ∨ ¬b

and also:

    c → d

What could we claim with  ∧i?

(a ∨ ¬b) ∧ (c → d)



//////////////////////////////////

Natural deduction proof syntax.


    premises ⊢ conclusion
    {
        1. claim                justification
        2. claim                justification
        ...
        n. conclusion           justification
    }



claim: a propositional logic statement
justificaton: the rule justifying the corresponding claim
    (along with line numbers as needed to reference previous claims)



/////////////////////////////////

Justifications so far:

    premise

    ∧i lhsNum rhsNum

    ∧e1 andNum

    ∧e2 andNum


////////////////////////////////

Example:

Given premises:  a ∧ b, c
Use natural deduction to prove: b ∧ c

a ^ b, c |- b ^ c
{
    1. a ^ b                premise
    2. c                    premise
    3. a                    ^e1 1
    4. b                    ^e2 1
    5. b ^ c                ^i 4 2
}


/////////////////////////////////

Using Logika to check our work.

/////////////////////////////////

Prove the following sequent:

p, q, r ⊢ r ∧ (q ∧ p)



////////////////////////////////

Prove the following sequent:

p ∧ q ∧ r ⊢ q


////////////////////////////////

Example:

if (level >= 9 && age >= 14) {
    if (age <= 18 && level <= 12) {
        //WE ARE HERE
    }
}

--> What premises do we know at that point?
Translate to propositional logic:

all conditions are true

p: level >= 9
q: age >= 14
r: age <= 18
s: level <= 12

p ^ q (outer if)
r ^ s (inner if)





--> How could we write an equivalent conditional statement?

if (level >= 9 && level <= 12 && age >= 14 && age <= 18) {
    //WE ARE HERE
}

p ^ s ^ q ^ r

p ^ q, r ^ s |- p ^ s ^ q ^ r
{
    //could prove this
}

if (true) {

}

--> Use natural deduction to prove that our new conditional
    statement is true whenever the old one is






    --> Have we proved the two conditional statements are equivalent?

no, would need to do the other way also


p ^ s ^ q ^ r |- p ^ q
{
    //could prove this
    //anytime conclusion is true, premise 1 is true
}

p ^ s ^ q ^ r |- r ^ s
{
    //could prove this
    //anytime conclusion is true, premise 2 is true
}

///////////////////////////////

Next time:

- OR rules in natural deduction
- Using natural deduction to prove two statements are equivalent
- Equivalent if-statements
- If time, implies rules in natural deduction