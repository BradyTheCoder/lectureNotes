HW 2 due Tuesday, January 31

--> will be creating 2 image files

--> make sure those are added to your git repository!

/////////////////////////////////

Today:

- Another parse tree
- A bit more with translations
- Equivalent propositions
- Proving equivalence with truth tables
- DeMorgan's laws
- Negating if-statements
- Satisfiability

/////////////////////////////////

How do we draw parse trees again?

Example: draw the parse tree for:

(p ∨ ¬q) ∧ (r → q ∨ p)






/////////////////////////////////

Identifying propositional atoms:

- true/false statements
- as minimal as possible (don't contain any logical connectives)


Example:

You can't enroll for the course if you haven't taken the prerequisite.


--> what are the propositional atoms?

p: you can enroll for the course
q: you have taken the prerequisite


--> are we promising they CAN enroll if they have the prereq?

no


--> or are we promising something else?

if you can enroll, you have taken the prereq
    p -> q

if you haven't taken the prereq, then you can't enroll
    !q -> !p




--> translate to propositional logic:




(what must be true if you CAN enroll for the course?)





/////////////

Example:

if (x <= 2 || y >= 0) {
    if (z != 17) {
        answer = 25;
    }
}

(what are we promising about answer?)

if all those conditions are true, then answer will be 25

p: x <= 2
q: y >= 0
r: z == 17
s: answer == 25

(p V q) ^ !r -> s






(what must be true if answer is NOT 25?)



if (x <= 2 || y >= 0) {
    if (z != 17) {
        answer = 25;
    }
}
<--

if answer isn't 25, what do I know?

(x > 2 && y < 0) || z == 17


//////////////////////////////////

Consider these two statements:



1) If I am at least 16 years old, then I can drive a car.

2) I'm not at least 16 years old or I can drive a car.


--> are they saying the same thing?

p: I am at least 16 years old
q: I can drive a car

1) p -> q
2) !p V q

truth tables.





--> how could we translate them to propositional logic statements?






--> how could we prove they have the same logical meaning?








//////////////////////////////////

DeMorgan's Laws.

...DeMorgan has so many laws...these are a couple of them.




if (a == 4 || a == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?

if (a != 4 && a != 5) {

}




///

if (a == 4 && b == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?

if (a != 4 || b != 5) {
    statements
}



--> how can we express this in propositional logic?


!(p V q) is equivalent to !p ^ !q

!(p ^ q) is equivalent to !p V !q


--> how can we prove DeMorgan's laws?





////////////////////////

Another if-statement example.

if (Character.isDigit(letter) == true || num < 10) {
    statements
}

--> how would we negate it?

!(p V q) equivalent !p ^ !q


if (Character.isDigit(letter) == false && num >= 10) {
    statements
}



///////////////////////

And one more. Negate this one:

if ((y >= 4 && num != 14) || x > 0) {
    statements
}

negation:

p: y >= 4
q: num == 14
r: x > 0

(p ^ !q) V r

want to negate it:
!((p ^ !q) V r)

!(p ^ !q) ^ !r
(!p V q) ^ !r

if ((y < 4 || num == 14) && x <= 0) {
    statements
}



///////////////////////

Other equivalences (≡ means "is equivalent to").


¬(p ∧ q) ≡ ¬p ∨ ¬q      (DeMorgan's laws)
¬(p ∨ q) ≡ ¬p ∧ ¬q


p ∧ T ≡ p               (identity laws)
p ∨ F ≡ p


p ∨ p ≡ p               (idempotent laws)


¬(¬p) ≡ p               (double negation law)


p ∨ q ≡ q V p               (commutative laws)
p ∧ q ≡ q ^ p


(p ∨ q) ∨ r ≡ p ∨ (q ∨ r)         (associative laws)
(p ∧ q) ∧ r ≡ p ∧ (q ∧ r)


p ∨ (q ∧ r) ≡ (p V q) ^ (p V r)         (distributive laws)
p ∧ (q ∨ r) ≡ (p ^ q) V (p ^ r)

5*(2 + 3) = 5*2 + 5*3


//////////////////////////

Equivalences with implies.

p → q ≡ !q -> !p (contrapositive)
p → q ≡ !p V q (can turn implies into an or)



are these equivalent?

    (p → q) → r
    p → (q → r)

  no!

  why?

  counterexample: find ONE truth assignment
  where the two statements have different values

/////////////////////////

Examples.

1) Find two statements equivalent to p ∨ q





2) Find two statements equivalent to ¬(p ∧ q)





////////////////////////

Satisfiability.

- definition: at least one truth assignment makes it true

- what kind of statement is satisfiable? what kind is not?

tautology, contingent

not satisfiable: contradictory

- is this satisfiable?

        (p ∨ ¬q) ∧ (q ∨ ¬r) ∧ (r ∨ ¬p)

        p = F
        q = F
        r = F



- Aside: NP complete problems

running time programs

can we solve a problem in polynomial time? class P

can we check a solution to a problem in polynomial time? class NP


does P = NP?

    SAT problem
    3-SAT problem
    Sudoku problem







////////////////////////

<-- stop here, will finish on Tuesday

Proving an argument.

*Premises* - pieces of information we are given (assume true)
*Conclusion* - something we are trying to show logically follows
    from our premises.


///

Proofs with truth tables.

Suppose we know:

    I am in the CS department.

    If I am in the CS department or the ECE department,
        then I have a CS account.

    If I have a CS account, then I can log in to the CS lab computers.


I want to prove:

    I can log in to the CS lab computers.



--> How would we translate to propositional logic?





--> How might we demonstrate this with truth tables?








/////////////////////////

Next time:

- counterexamples to arguments
- why proofs with truth tables can be unwieldy
- introduce minimal set of deduction rules
- apply these rules to prove conclusions in propositional logic
