HW 3 due Tuesday, February 7

    Reminder: correct submission format

    .../tree/digital fingerprint

    --> will get a penalty on this assignment if not correct format

    Next HW will be posted next week (not due until Feb 21)

Exam 1 is Thursday, February 9
    take full time
    closed notes
    similar to HW problems

/////////////////////////////////////

Today:

- Translations reminder
- Order of operations reminder
- Deduction rules with implies operator
- Exam 1 review

/////////////////////////////////////

Reminder: translations

p: I go swimming
q: I wear sunscreen


Meaning of:

p → q

Correct: If I go swimming, then I wear sunscreen

Not correct: I go swimming, therefore I wear sunscreen


¬p → ¬q


If I don't go swimming, then I won't wear sunscreen


////////////////////////////////////


Reminder: order of operations

p ∧ q ∨ r is equivalent to (p ∧ q) ∨ r

p, q, r ⊢ p ∧ q ∨ r
{
    1. p            premise
    2. q            premise
    3. r            premise
    4. q ∨ r        Vi1 2
    5. p ^ (q V r) <-- this is all I could claim,
                    which isn't what I want

    //finish
}






/////////////////////////////////////

Implies-elimination, →e

      P, P → Q
→e: -----------
        Q



Example:

If it is hot, then I will go swimming.
It is hot.

Conclusion? I will go swimming.



Example:

//Suppose we know x > 5. What can we conclude?

if (x > 5) {
    y = 17;
}

y will get set to 17





--> how would this look in a truth table?
    (what times would P and P → Q both be true?)




///////////////////////////////////////

Syntax for using →e:

a. P                (some justification)
b. P → Q            (some justification)
c. Q                →e b a



////////////////////////////////////////

Example:

(p ∧ q) → r,  p → q,  p  ⊢  r
{
    1. (p ∧ q) → r              premise
    2. p → q                    premise
    3. p                        premise
    4. q                        →e 2 3
    5. p ∧ q                    ∧i 3 4
    6. r                        →e 1 5
}



Example:

p → r,  q → r,  p ∨ q  ⊢  r
{
    1. p → r                premise
    2. q → r                premise
    3. p ∨ q                premise
    4. {
        5. p                assume
        6. r                →e 1 5
    }
    7. {
        8. q                assume
        9. r                →e 2 8
    }
    10. r                   ∨e 3 4 7
}


//////////////////////////////////////

Implies-introduction, →i

      {P assume
      ... Q}
→i: -----------
      P → Q


Idea: if Q is true whenever P is, then we can promise that
    if P is true, then Q is too.

This is the relationship P → Q.


--> how does this relate to proofs with truth tables?





////////////////////////////////////////

Syntax for using ->i:

a. {
    b. P            assume
    ...
    c. Q            (some justification)
}
d. P → Q            →i a




///////////////////////////////////////

Example:

p → r,  q → r  ⊢  (p ∧ q) → r
{
    1. p → r                premise
    2. q → r                premise
    3. {
        4. p ∧ q            assume //assume the LHS of the goal ->
        5. p                ∧e1 4
        6. r                →e 1 5
        //goal: get to r, which the RHS of the goal ->
    }
    7. (p ∧ q) → r          →i 3
}




--> What if we wanted to conclude (p ∨ q) → r





////////////////////////////////////////

Exam 1 review.

Covers everything we've done up to this point:

- Basic logical reasoning (over English statements and if-statements)
- Logic puzzles
- Circuits
- Truth tables
- Parse trees
- Proving two propositional logic statements are equivalent
    (using truth tables and using natural deduction proofs)
- Counterexamples to show propositional logic statements
    are NOT equivalent
- DeMorgan's laws on propositional logic (and their application)
- Satisfiability
- Translating between English and propositional logic
- Arguments (premises and a proposed conclusion)
- Determining whether an argument is valid or invalid
    invalid when there is a truth assignment that makes ALL premises
        true but makes the conclusion false
    valid: have to either do a proof with truth tables
        to show any time all premises are true then conclusion is true
        OR have to prove the argument with natural deduction
- Proving an argument with truth tables
- Natural deduction proofs in propositional logic using the
    AND, OR, and IMPLIES rules


Closed notes/computers.

All problems will be "open-ended" - similar in content/format
to HW problems.

Some problems will ask for an explanation -- read carefully!

////////////////////////////////////////

See previous exam.

--> yours will have a different format
--> this exam also covered negation deduction rules, and yours won't
--> your exam may include topics from above that aren't on this exam

--> I'll post full solution after class
...but will only work relevant open-ended problems now

/////////////////////////////////////////

Additional review problems.

- draw a circuit: (p OR (NOT q AND r)) OR q




///

- draw a parse tree: p ∧ q ∨ r → p ∨ ¬q


///

- are these equivalent?
    p → q
    p ∨ ¬q

NO

p = T  q = F

1st statement would be false, second would be true

///

- what about these?
    p → q
    ¬p ∨ q

YES

p q | p → q
-------------
T T |   T
T F |   F
F T |   T
F F |   T


p q | ¬p ∨ q
-------------
T T | F  T
T F | F  F
F T | T  T
F F | T  T

The same set of truth assignment make each statement true


///

- is this a valid sequent (a valid argument)?

    p → q, ¬q ⊢ (¬p → q)

Invalid

one truth assignment where all premises are true but conclusion is false


p = F
q = F



--> make up some propositional atoms

p: It is Tuesday
q: I eat tacos

--> what do the premises say? what does the conclusion say?

p → q, ¬q ⊢ (¬p → q)

premises:
If it Tuesday, then I eat tacos
I do not eat tacos

conclusion (which is invalid):
If it is not Tuesday, then I eat tacos


///

- is this statement satisfiable?
    (p ∨ ¬q) → (q ∨ ¬p)

make LHS false

p = F
q= T

///

if (num1 >= 10 || num2 < 5) {
    answer = 14;
}

--> what do we know here if answer is NOT 14?

num1 < 10 and num2 >= 5


--> how could we negate the above if-statement?

use DeMorgan's law

if (num1 < 10 && num2 >= 5)

use DeMorgan's law twice:

if (x > 0 || (num1 < 5 && num2 > 10))

///

Remember this sequent:

p → r,  q → r  ⊢  (p ∧ q) → r


How could we prove this argument using truth tables instead
of natural deduction?

truth table for each premise
truth table for the conclusion

find set of truth assignments that makes all premises true

ensure the conclusion is also true for each truth
    assignment in that set


///

I cook dinner or I eat out.

If I am busy, I don't cook dinner.

I am busy.


Translate to propositional logic.

p: I cook dinner
q: I eat out
r: I am busy

I cook dinner or I eat out.
    p V q

If I am busy, I don't cook dinner.
    r -> !p

I am busy.
    r



////////////////////////////////////////

How to prepare.

Review HW!
