HW 3 due Tuesday, February 7

    Reminder: correct submission format

    repo/tree/digital fingerprint

Exam 1 is Thursday, February 9
    take full time
    closed notes
    similar to HW problems

//////////////////////////////////////////

HW 1 grading discussion

- be sure to provide an explanation if the problem asks for one


Most commonly missed problems were #3 and #4 on the first page:

////

#3: Suppose we have the following code fragment:

    x = 5;
    if (a > 0) {
        x = 7;
        if (a % 2 == 1) {
            y = 14;
        }
    }

Just after the code fragment finishes, suppose we know that
x is 7 but that y is NOT 14. What can we conclude about a? Explain.

from 1st if: a > 0 (must have been to change x to 7)
from 2nd if: a must be even (because y WOULD be 14 if
    we went into the inner if, which would have
    been when a was odd. It didn't, so a is even.)

a must be a positive even number





////

#4: Suppose we have the following code fragment:

    y = 0;
    if (a > 10 && a < 20) {
        x = 20;
    }
    else {
        if (a > 10) {
            y = 17;
        }
    }

Part 1: Just after the code fragment finishes, suppose we know
that y is 17 but that x is NOT 20.
What can we conclude about a? Explain.


from 1st if? !(a > 10 && a < 20)
    a <= 10 || a >= 20

didn't go in first if because otherwise x WOULD be 20

from second if? y got changed from 0 to 17, so must
    have gone in nested else/if. So a > 10

putting them together:
     a <= 10 || a >= 20
     a > 10

     a must be >= 20, since a <= 10 is false and the || is true.

///

Part 2: What if the statement "y = 0;" was removed from the
beginning of the code fragment. Would that affect what we could
conclude in Part 1 (if we still knew that y was 17 and that
x was not 20 just after the code fragment finishes)? Explain.

from first if? still know its condition is false, or
    x would be 20.
    a <= 10 || a >= 20

from second if? nothing. y might have been set to 17
    somewhere else

putting them together: a <= 10 || a >= 20


//////////////////////////////////////////

Today:

- OR rules in natural deduction
- Using natural deduction to prove two statements are equivalent
- Equivalent if-statements
- If time, implies rules in natural deduction


///////////////////////////////////////////

Review:

- we want to prove that a conclusion logically follows from
    a set of premises

- could do this with truth tables
    ...but it is very tedious
    (Reminder: how did it work?)


We use *natural deduction* with a minimal set of rules
    to prove the same things



Natural deduction proof syntax.

|-

    premises ⊢ conclusion
    {
        1. claim                justification
        2. claim                justification
        ...
        n. conclusion           justification
    }

premises ⊢ conclusion --> this is a SEQUENT

claim: a propositional logic statement
justificaton: the rule justifying the corresponding claim
    (along with line numbers as needed to reference previous claims)


///////////////////////////////////////////

Rules from Tuesday:

premise
∧i lhsLine rhsLine
∧e1 lineWithAnd
∧e2 lineWithAnd

/////////////////////////////////////////////

Prove that ∧ is commutative:

p ∧ q ⊢ q ∧ p
{
    1. p ∧ q                premise
    2. p                    ∧e1 1
    3. q                    ∧e2 1
    4. q ∧ p                ∧i 3 2
}



////////////////////////////////////////////

OR introduction

          P                      Q
 ∨i1 : ---------        ∨i2 : ---------
        P ∨ Q                   P ∨ Q


Why does this make sense from truth tables?



Syntax:

 ∨i1 lineWithLeft
 ∨i2 lineWithRight

///////////////////////////////////////////

Example:

p ∧ q ⊢ p ∨ q
{
    1. p ∧ q                    premise
    2. q                        ∧e2 1
    3. p ∨ q                    ∨i2 2
}



///////////////////////////////////////////

OR elimination


Idea:
- If an OR statement is true, what do we know?
    --> at least one side is true

- Reach same conclusion no matter which side of the OR is true
- Then that conclusion holds overall


Rule summary:


      P ∨ Q   {P assume    {Q assume
                ... R}       ... R}
∨e : ---------------------------------
                    R



How does this relate to programming?

if (condition) {
    some result
}
else {
    some result
}

--> what do we know is true here?
"some result"

///////////////////////////////

Syntax for using ∨e:

a. P ∨ Q            (some justification)
b. {
    P               assume
    ...
    R               (some justification)
}
c. {
    Q               assume
    ...
    R               (some justification)
}
d. R                ∨e a b c


////////////////////////////////

Example: prove that ∨ is commutative

p ∨ q ⊢ q ∨ p
{
    1. p ∨ q                    premise
    2. {
        3. p                    assume
        4. q ∨ p                ∨i1 3
    }
    5. {
        6. q                    assume
        7. q ∨ p                ∨i1 6
    }
    8. q ∨ p                    ∨e 1 2 5
}



////////////////////////////////

Do you think we could prove:

p ∨ q ⊢ p ∧ q
{
    1. p ∨ q                premise
    2. {
        3. p                assume
        //we would be stuck
        //can't build to p ∧ q
    }
}


--> what happens?

////////////////////////////////

Proving equivalence.

--> how do we prove two statements are equal in truth tables?

    DeMorgan's laws:
    !(p V q) is equivalent to !p ^ !q

    make two truth tables
    exactly same list of truth assignments make each one true

--> how do we do it with proofs?

!(p V q) |- !p ^ !q

AND

!p ^ !q |- !(p V q)




////////////////////////////////

Example: prove one of the distributive laws

p ∨ (q ∧ r)     is equivalent to       (p ∨ q) ∧ (p ∨ r)

p ∨ (q ∧ r)  |- (p ∨ q) ∧ (p ∨ r)


<--- STOP HERE. Will continue on Tuesday.



///////////////////////////////

Equivalence in if-statements.



Consider this if-statement:

if (grade >= 80 || extraCredit == true) {
    if (grade <= 90 || extraCredit == true) {
        //do stuff
    }
}


--> what is an equivalent, simpler if-statement?


--> how could we prove it?


///////////////////////////////////

Next set of deduction rules: implies operator

/////////////////////////////////////

Implies-elimination, →e

      P, P → Q
→e: -----------
        Q



English example:

If it is hot, then I will go swimming.
It is hot.

Conclusion?


--> how would this look in a truth table?
    (what times would P and P → Q both be true?)


///////////////////////////////////////

Syntax for using ->e:

a. P                (some justification)
b. P → Q            (some justification)
c. Q                →e b a



////////////////////////////////////////

Example:

(p ∧ q) → r,  p → q,  p  ⊢  r



Example:

p → r,  q → r,  p ∨ q  ⊢  r


//////////////////////////////////////

Implies-introduction, →i

      {P assume
      ... Q}
→i: -----------
      P → Q


Idea: if Q is true whenever P is, then we can promise that
    if P is true, then Q is too.

This is the relationship P → Q.


--> how does this relate to proofs with truth tables?

////////////////////////////////////////

Syntax for using ->i:

a. {
    b. P            assume
    ...
    c. Q            (some justification
}
d. P → Q            →i a

///////////////////////////////////////

Example:

p → r,  q → r  ⊢  (p ∧ q) → r




////////////////////////////////////////

Next time:

- More with implies rules
- Review for Exam 1