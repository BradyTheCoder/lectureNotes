HW 1 - due before midnight tonight

HW 2 will be posted later today

///////////////////////////

Today:

- logic gates
- truth tables
- parse trees
- begin propositional logic

///////////////////////////

Basic logic gates (draw on board)

gates still used to design circuits

why do we care about equivalent circuits
    (especially if one uses fewer gates)?



what about programming?




//////////////////////////////////////////

Design circuits for:

NOT (p OR q)       (p NOR q)



NOT (p AND (q OR r))



p XOR q (with just the gates we've seen, not a specific XOR gate)

(p OR q) AND NOT(p AND q)

--> how to add an image to GitHub repo?

/////////////////////////////////////

How would we evaluate the output of these circuits with
different inputs?




Graphically build circuits:

https://logic.ly/demo/


//////////////////////////////////////

Truth tables.

- boolean variables (each can be true or false)
- connect with logical operators

Basic operations:

∧ - AND (can use a caret ^ )
∨ - OR (inclusive or) (can use a capital V)
¬ - NOT (can use ! or ~ instead)
→ - IMPLIES (can use ->)

///////////////////////////////////////////////////

Fill in basic operations:


AND:

p q | p ∧ q
------------
T T |   T
T F |   F
F T |   F
F F |   F


OR:

p q | p ∨ q
------------
T T |   T
T F |   T
F T |   T
F F |   F


NOT:

p | ¬p
-------
T | F
F | T

////////////////////////////////////////////////

IMPLIES operator →

"If I have a test, then I will study"

p: I have a test
q: I will study

p → q

It is false if we have BROKEN A PROMISE.
It is true when there is no broken promise.

p q | p → q
------------
T T |   T
T F |   F
F T |   T
F F |   T

How does the implies operator relate to programming?


//////////////////////////////////////

Compound truth tables.


Consider ¬p ∧ q ∨ r.

--> what operation do we do first?



Order of operations

In math? 3 - 2 + 4 - 2 * 8

()
exponents
multiplication/division (L to R)
addition/subtraction (L to R)



For logic statements:

From highest to lowest precedence:
    (), ¬, ∧, ∨, →




Given this statement:

    ¬p ∧ q ∨ r


Add () to show the order of operations.

((¬p) ∧ q) ∨ r

Evaluate the above statement using these
variable assignments:

p is T
q is F
r is F

F ∨ F -> false


////////////////////////////////////////////////

Order of operations
    ¬ evaluates right to left
        ¬¬p is equivalent to.... ¬(¬p)

    ∧ and ∨ evaluate left to right
        p ∧ q ∧ r is equivalent to.... (p ∧ q) ∧ r
        p ∨ q ∨ r is equivalent to.... (p ∨ q) ∨ r

    → evaluates right to left
        p → q → r is equivalent to.... p → (q → r)





//////////////////////////////////////////

Top-level operator (what happens LAST?)


¬p ∧ q ∨ r

OR happens last - its output is the output
of the overall statement/circuit

///////////////////////////////

p ∧ q ∨ r ∧ p

rewrite with (): (p ∧ q) ∨ (r ∧ p)

top-level operator: OR


//////////////////////////////

p ∧ q ∧ r ∧ s

rewrite with (): ((p ∧ q) ∧ r) ∧ s

top-level operator: the last (rightmost) AND

////////////////////////////////////////////////////

Classifying truth tables.

Contingent, contradictory, tautology

Contingent: output of statement is mix of true/false

    --> example:

    p ∧ q ∧ r ∧ s

    when p/q/r/s are all true, the output is true
    but for every other truth assignment, the output is false

Contradictory: every output is false

    --> example:

    ¬p ∧ p

Tautology: every output is true

    --> example:

    ¬p ∨ p

////////////////////////////////////////

Write a truth table for:

(p ∧ q) → p

              *
p q | (p ∧ q) → p
------------------
T T |    T    T
T F |    F    T
F T |    F    T
F F |    F    T

2^(number of variables)

--> need to evaluate statement on ALL possible truth assignments

--> how many truth assignments are there?

--> how would we classify this truth table? tautology


/////////////////////////////////////////

complete truth table in truth.logika

/////////////////////////////////////////

parse trees

--> what are they?

--> draw one for (p ∧ q) → ¬r


--> how do they relate to programming?

////////////////////////////////////////

Propositional logic.


- a set of propositional atoms (statements that can be T/F)
    --> these will be our boolean variables in logic statements



- connected by logical operators



- join together to make new propositions (logical sentences)
    that can be true or false



////////////////////////////////////////

Which ones are propositions?

Today is Thursday. yes!


What time is it? no! (answer isn't true or false)


x == 2 yes!


Pigs can fly. yes!


Drive carefully. no!


y <= 4 yes!



////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.

    q: It is snowing.

    r: y <= 4

    s: x == 2


How would we express these as English sentences?

    ¬p: It is not below freezing


    p ∧ q: It is below freezing and it is snowing


    p → q : If it is below freezing, then it is snowing


    ¬p → ¬q: If it is not below freezing, then it is not snowing


    r ∨ s: y <= 4 || x == 2

    ¬r: y > 4

////////////////////////

Next time:

- A bit more with translations
- Equivalent propositions
- DeMorgan's laws
- Equivalent if-statements
- Negating if-statements
- Proving equivalence with truth tables
- Satisfiability
