HW 1 - due before midnight tonight

HW 2 will be posted later today

///////////////////////////

Today:

- truth tables
- logic gates
- parse trees
- begin propositional logic

///////////////////////////

Start truth tables and logic gates.

    have boolean variables
    want to express statements like: p AND (q OR r)

////////////////////////////

Truth tables.

- boolean variables (each can be true or false)
- connect with logical operators

Basic operations:

∧ - AND (can use a caret ^ )
∨ - OR (inclusive or) (can use a capital V)
¬ - NOT (can use ! or ~ instead)
→ - IMPLIES (can use ->)

///////////////////////////////////////////////////

Fill in basic operations:


AND:

p q | p ∧ q
------------
T T |
T F |
F T |
F F |


OR:

p q | p ∨ q
------------
T T |
T F |
F T |
F F |


NOT:

p | ¬p
-------
T |
F |

////////////////////////////////////////////////

IMPLIES operator →

"If I have a test, then I will study"

p: I have a test
q: I will study

p → q

It is false if we have BROKEN A PROMISE.
Otherwise we have not.

p q | p → q
------------
T T |
T F |
F T |
F F |

How does the implies operator relate to programming?

//////////////////////////////////////////

Basic logic gates (draw on board)

gates still used to design circuits

why do we care about equivalent circuits
    (especially if one uses fewer gates)?

what about programming?

//////////////////////////////////////////

Design circuits for:

¬(p ∨ q)       (p NOR q)

¬(p ∧ (q ∨ r))

p XOR q (with just the gates we've seen, not a specific XOR gate)

/////////////////////////////////////

How would we evaluate the output of these circuits with
different inputs?

Graphically build circuits:

https://logic.ly/demo/

//////////////////////////////////////

Compound truth tables.


Consider ¬p ∧ q ∨ r in a truth table.

--> what do we evaluate first?



Order of operations

In math? 3 - 2 + 4 - 2 * 8





For logic statements:

From highest to lowest precedence:
    (), ¬, ∧, ∨, →




Given this statement:

    ¬p ∧ q ∨ r


Evaluate the following statement using the following
variable assignments:

p is T
q is F
r is F




////////////////////////////////////////////////

Order of operations
    ¬ evaluates right to left
        ¬¬p is equivalent to....

    ∧ and ∨ evaluate left to right
        p ∧ q ∧ r is equivalent to....
        p ∨ q ∨ r is equivalent to....

    → evaluates right to left
        p → q → r is equivalent to....





//////////////////////////////////////////

Top-level operator (what happens LAST?)


///////////////////////////////

p ∧ q ∨ r ∧ p

rewrite:

top-level operator:


//////////////////////////////

p ∧ q ∧ r ∧ s

rewrite:

top-level operator:

////////////////////////////////////////////////////

Truth tables in Logika

Contingent, contradictory, tautology

Contingent:

    --> example:

Contradictory:

    --> example:

Tautology:

    --> example:

////////////////////////////////////////


complete truth table in truth.logika

/////////////////////////////////////////

parse trees

--> what are they?

--> draw one for (p ∧ q) → ¬r


--> how do they relate to programming?

////////////////////////////////////////

Propositional logic
- a set of propositional atoms (statements that can be T/F)
    --> these will be our boolean variables in logic statements

- connected by logical operators

- join together to make new propositions (logical sentences)
    that can be true or false

////////////////////////////////////////

Which ones are propositions?

Today is Tuesday.


What time is it?


x == 2


Pigs can fly.


Drive carefully.


y <= 4



////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.

    q: It is snowing.

    r: y <= 4

    s: x == 2


How would we express these as English sentences?

    ¬p


    p ∧ q


    p → q


    ¬p → ¬q


    r ∨ s

    ¬r


////////////////////////

Next time:

- A bit more with translations
- Equivalent propositions
- Proving equivalence with truth tables
- Satisfiability
