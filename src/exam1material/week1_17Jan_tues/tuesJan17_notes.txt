CIS 301. Logical Foundations of Programming.

Julie Thornton.

What is this class?
- logical reasoning (basics, then puzzles)
- proofs (why?)
- reasoning about code
    - analyzing what we know
    - identifying equivalent programs
    - simplifying programs
- basics of proving correctness of programs (why?)


Syllabus

Canvas setup

Discord


/////////////////////////

HW 0 - due Thurs Jan 19
    --> see how to do it

HW 1 - due Tues Jan 24

/////////////////////////

How to succeed

/////////////////////////

Where are we going?

public int min(int[] nums)
{
    //How would we write this
    //to return the min element in nums?

    int small = nums[0];

    for (int i = 1; i < nums.length; i++) {
        //loop invariant
        //after i iterations, small is
        //the smallest of the first i elements in nums

        if (small < nums[i]) {
            small = nums[i];
        }
    }

    return small;
}

//elsewhere
int[] test = {7,-5,0,-5,3,2};
int result = min(test);


--> what value should result have?

result = -5;


--> what could min *promise* to return that would guarantee our
    answer?

parameter: int array

min promises to return a number that is less than or
equal to every element in the parameter array

the number returned is an element in the array

in the case of duplicates, returns the first such instance


--> what do we call this "promise?" postcondition





--> what should be true at the end of each iteration in our loop
    to be sure we'll return the right thing?




--> what is this description called?

loop invariant


--> in what situations would min not work?

it would crash if the array was empty


--> what do we need to require about min? What is this called?

we want to require that the array has at least one element

precondition

/////////////////////////

Taking a step back...what is logic?

- analysis of an argument according to a set of rules
- given a set of premises (and sometimes a conclusion)


- we determine a valid conclusion when we assume
all the premises are true


Note that the premises might make no sense!

//////////////////////////////////////////////////////////

Premise 1: If a person wears a red shirt, then they don’t
    like pizza.
Premise 2: Fred is wearing a red shirt.

Conclusion: Fred doesn’t like pizza.

--> Is this a valid argument?

yes!


//////////////////////////////////////////////////////////

Logical Arguments with ”OR”

- can be ambiguous! Why?

I order fries or I order chips.

"or" can be inclusive or exclusive


- in English, how do we interpret "or"?

usually exclusive, but not always.

- in programming?

always inclusive


"Or" in THIS class: inclusive



Premise 1: I'll fold the laundry or I'll do the dishes.
Premise 2: I don't fold the laundry.

--> What can I conclude?

I'll do the dishes


/////////////////////////////////////////////////////////

num = 5;
if (num < 4 || x >= 10) {
    statement;
}



Suppose we know "statement" is executed
--> What can we conclude?

x >= 10

(the only way to make the OR statement true)





/////////////////////////////////////////////////////////

What rule are we seeing with an ”or” statement,
where we know that one of the statements is NOT true?

the other part of the or must be true



////////////////////////////////////////////////////////

x = 9;
if (num < 4 || x >= 10) {
    if (num > 2) {
        statement;
    }
}



Suppose we know "statement" is executed
--> What can we conclude?

num = 3


/////////////////////////////////////////////////////////

Logical Arguments with ”IF/THEN” (aka "implies" -> )

If it is raining, then I will get wet.
It is raining.

--> What can I conclude?


I will get wet.


/////////////////////////////////////////////////////////

When we have an ”if/then” statement,
and we know that the ”if” part is true?

    ...what can we always conclude?



the then part is true


////////////////////////////////////////////////////////

If I don’t hear my alarm, then I will be late for class.
I am late for class.

--> What can I conclude?


nothing



///////////////////////////////////////////////////////

If I don’t hear my alarm, then I will be late for class.
I hear my alarm.

--> What can I conclude?

nothing.




///////////////////////////////////////////////////////

If I don’t hear my alarm, then I will be late for class.

--> Can you think of another way to phrase this promise?

--> What do we know if we AREN'T late?


If I'm not late for class, then I must have heard my alarm.

/////////////////////////////////////////////////////

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. What do we know?

if condition is true, I promise y is 17

I don't know anything - y might have already been 17

////////////////////////////////////////////////////

y = 10;

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. Can we conclude anything now?

num < 4 or x >= 10

/////////////////////////////////////////////////////

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is NOT 17 here. What do we know?

num >= 4 and x < 10 (since I know the condition is false)

/////////////////////////////////////////////////////

Homework 0: due Thursday, January 19
    - get Sireum/IntelliJ + GitHub ready (do this now!)
    - post something in Discord
    - come to office hours or post in Discord if
        you need software setup help!

Homework 1: due Tuesday, January 24
    - first page of homework is logical reasoning
        (what we did today)
    - second page is logic puzzles (what we'll do on Thursday)

Next: logic puzzles!